#!/usr/bin/env python
import os
import json
import argparse
import configparser
import logging
import hephaestus
from pkg_resources import resource_filename
from logging import config

# startupLogger.info('Setting up sys.path')
# PACKAGE_PARENT = '..'
# SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))
# PATH_APPEND = os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)) + '/'
# startupLogger.info("Adding to sys.path '%s'" % PATH_APPEND)
# sys.path.append(PATH_APPEND)

parser = argparse.ArgumentParser(description="Queue Consumer", prog=hephaestus.__title__)

parser.add_argument('--version', action='version', version='%(prog)s v' + hephaestus.__version__)
parser.add_argument('-l', '--log-level',
                    dest="log_level",
                    action='store',
                    default='INFO',
                    help='Log Level to operate the program in')
parser.add_argument('-c', '--config',
                    dest="config",
                    action='store',
                    default='',
                    help='Absolute path to configuration file')
parser.add_argument('-k', '--aws-key',
                    dest="aws_key",
                    action='store',
                    help='AWS Key')
parser.add_argument('-s', '--aws-secret',
                    dest="aws_secret",
                    action='store',
                    help='AWS Secret')
parser.add_argument('-r', '--aws-region',
                    dest="aws_region",
                    action='store',
                    help='AWS Region')
parser.add_argument('-q', '--sqs-queue-name',
                    dest="queue_name",
                    action='store',
                    help='SQS Queue Name')
parser.add_argument('-v', '--visibility-timeout',
                    dest="visibility_timeout",
                    action='store',
                    help='SQS Visibility Timeout')
parser.add_argument('-m', '--max-number-of-messages',
                    dest="max_number_of_messages",
                    action='store',
                    help='Max Number of Mesages to get per request to SQS')
parser.add_argument('-t', '--wait-time-seconds',
                    dest="wait_time_seconds",
                    action='store',
                    help='Enables long polling to SQS. Value specifies how long to wait for new messages')
parser.add_argument('-wb', '--wait-between-requests',
                    dest="wait_between_requests",
                    action='store',
                    help='Wait n seconds after connection to SQS returns, before initiating a new connection')
parser.add_argument('-w', '--queue-workers',
                    dest="queue_workers",
                    action='store',
                    help='Number of SQS message fetching threads to spawn')
parser.add_argument('-mw', '--message-processor-workers',
                    dest="message_processor_workers",
                    action='store',
                    help='Number of message processor threads to spawn')
parser.add_argument('-qs', '--message-queue-max-size',
                    dest="message_queue_max_size",
                    action='store',
                    help='Max size of message queue from which message processor threads pick up messages')
parser.add_argument('-mtc', '--message-transport-conf',
                    dest="message_transport_conf",
                    action='store',
                    help='The transport configuration file location')


args = parser.parse_args()

config.dictConfig({
    'version': 1,
    'formatters': {
        'basicFormatter': {
            'format': '[%(levelname)s %(asctime)s] %(name)s: %(message)s'
        }
    },
    'handlers': {
       'console': {
           'class': 'logging.StreamHandler',
           'formatter': 'basicFormatter',
           'stream': 'ext://sys.stdout'
       }
    },
    'loggers': {
        'hephaestus': {
            'level': logging.getLevelName(args.log_level),
            'propagate': False,
            'handlers': ['console']
        }
    }
})
startupLogger = logging.getLogger('hephaestus.startup')
startupLogger.info('Starting up Hephaestus')

from hephaestus.conf import settings, load_transport
from hephaestus.exceptions import TransportFileNotFound
from hephaestus import worker


def set_config(config):

    def get_config(key, config_section_key, config_get_type=None):
        arg = getattr(args, key, None)
        if arg:
            if config_get_type:
                return config_get_type(arg)
            else:
                return arg
        config_section = config[config_section_key]

        if not config_get_type:
            return config_section.get(key)
        elif config_get_type == int:
            return config_section.getint(key)

    setattr(settings, 'AWS_KEY', get_config('aws_key', 'AWS_CREDENTIALS'))
    setattr(settings, 'AWS_SECRET', get_config('aws_secret', 'AWS_CREDENTIALS'))
    setattr(settings, 'AWS_REGION', get_config('aws_region', 'AWS_CREDENTIALS'))

    setattr(settings, 'SQS_QUEUE_NAME', get_config('queue_name', 'SQS_SETTINGS'))
    setattr(settings, 'SQS_VISIBILITY_TIMEOUT', get_config('visibility_timeout', 'SQS_SETTINGS', int))
    setattr(settings, 'SQS_MAX_NUMBER_MESSAGES', get_config('max_number_of_messages', 'SQS_SETTINGS', int))
    setattr(settings, 'SQS_WAIT_TIME_SECONDS', get_config('wait_time_seconds', 'SQS_SETTINGS', int))
    setattr(settings, 'SQS_WAIT_BETWEEN_REQUESTS', get_config('wait_between_requests', 'SQS_SETTINGS', int))

    setattr(settings, 'QUEUE_WORKERS', get_config('queue_workers', 'WORKER_SETTINGS', int))
    setattr(settings, 'MESSAGE_PROCESSOR_WORKERS', get_config('message_processor_workers', 'WORKER_SETTINGS', int))
    setattr(settings, 'MESSAGE_QUEUE_MAX_SIZE', get_config('message_queue_max_size', 'WORKER_SETTINGS', int))

    transport_conf = get_config('message_transport_conf', 'GENERAL')
    if not transport_conf:
        transport_conf = resource_filename("hephaestus", "message_transport_conf.json")
    setattr(settings, 'MESSAGE_TRANSPORT_CONF', transport_conf)

    startupLogger.debug('Config set as-' + str(settings.__dict__))


def set_transports():
    startupLogger.info('Transport config file - %s' % str(settings.MESSAGE_TRANSPORT_CONF))
    try:
        message_transport_conf = json.load(open(settings.MESSAGE_TRANSPORT_CONF))
    except FileNotFoundError:
        raise TransportFileNotFound("Transport Configuration File Not Found at '%s'" % str(settings.MESSAGE_TRANSPORT_CONF))

    startupLogger.info('Loading transport type - %s' % message_transport_conf['type'])
    Transport = load_transport(message_transport_conf['type'])
    transport = Transport(conf=message_transport_conf)
    transport.setup()
    transport.load()
    return transport


if __name__ == '__main__':
    config = configparser.ConfigParser()
    startupLogger.info("Reading configuration file")
    files_read = config.read([resource_filename("hephaestus", "hephaestus.conf"), os.path.join("/etc/hephaestus", "hephaestus.conf"), os.path.join(os.path.expanduser('~'), "hephaestus.conf"), os.path.join(os.curdir, "hephaestus.conf"), args.config])
    startupLogger.info('Config file read from - %s' % ", ".join(files_read))
    startupLogger.debug('Config file sections found %d. Sections - %s' % (len(config.sections()), config.sections()))
    startupLogger.info('Setting config')
    set_config(config)
    startupLogger.info('Setting transports')
    transport = set_transports()
    startupLogger.info('Starting workers')
    worker.start_workers(transport=transport)
